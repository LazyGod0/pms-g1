// src/libs/firestore-utils.ts
import { doc, runTransaction, collection, getDocs, query, where } from "firebase/firestore";
import { db } from "@/configs/firebase-config";

// ‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö
type CounterDoc = { tempSeq?: number };

/** ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ id ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö temp0001, temp0002 ... ‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô */
export async function getNextTempId(uid: string): Promise<string> {
  const counterRef = doc(db, "users", uid, "submissions", "_counters");

  const nextNum = await runTransaction(db, async (tx) => {
    const snap = await tx.get(counterRef);

    // ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á any ‡πÇ‡∏î‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏™‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô type ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
    let current = 0;
    if (snap.exists()) {
      const data = snap.data() as CounterDoc | undefined;
      current = typeof data?.tempSeq === "number" ? data.tempSeq : 0;
      // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ snap.get('tempSeq') ‡∏Å‡πá‡πÑ‡∏î‡πâ:
      // current = typeof snap.get("tempSeq") === "number" ? (snap.get("tempSeq") as number) : 0;
    }

    const next = current + 1;
    tx.set(counterRef, { tempSeq: next }, { merge: true });
    return next;
  });

  return `temp${String(nextNum).padStart(4, "0")}`;
}

/** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà */
export async function checkDuplicatePublication(
  uid: string,
  title: string,
  year: string,
  excludeDocId?: string
): Promise<boolean> {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
    if (!uid || !title.trim() || !year.trim()) {
      console.warn("‚ö†Ô∏è Invalid input for duplicate check:", { uid, title, year });
      return false;
    }

    const normalizedTitle = title.trim().toLowerCase();
    const normalizedYear = year.trim();

    console.log("üîç Checking duplicate publication:", {
      uid,
      normalizedTitle,
      normalizedYear,
      excludeDocId
    });

    const submissionsRef = collection(db, "users", uid, "submissions");

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö manual ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à
    const allSubmissions = await getDocs(submissionsRef);

    console.log("üìä Total documents found:", allSubmissions.size);

    let duplicateFound = false;
    const duplicates: any[] = [];

    allSubmissions.forEach((doc) => {
      // ‡∏Ç‡πâ‡∏≤‡∏° document ‡∏ó‡∏µ‡πà exclude (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
      if (excludeDocId && doc.id === excludeDocId) {
        console.log("‚è≠Ô∏è Skipping excluded document:", doc.id);
        return;
      }

      const data = doc.data();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ basics ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      if (!data.basics || !data.basics.title || !data.basics.year) {
        return;
      }

      const docTitle = data.basics.title.trim().toLowerCase();
      const docYear = data.basics.year.trim();

      console.log("üìÑ Checking document:", {
        id: doc.id,
        docTitle,
        docYear,
        normalizedTitle,
        normalizedYear,
        titleMatch: docTitle === normalizedTitle,
        yearMatch: docYear === normalizedYear,
        status: data.status
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô (case-insensitive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á)
      if (docTitle === normalizedTitle && docYear === normalizedYear) {
        console.log("‚ö†Ô∏è Found duplicate:", {
          id: doc.id,
          title: data.basics.title,
          year: data.basics.year,
          status: data.status
        });

        duplicateFound = true;
        duplicates.push({
          id: doc.id,
          title: data.basics.title,
          year: data.basics.year,
          status: data.status,
          createdAt: data.createdAt,
          updatedAt: data.updatedAt
        });
      }
    });

    if (duplicateFound) {
      console.log("‚ùå DUPLICATE DETECTED!");
      console.log("‚ö†Ô∏è Total duplicates found:", duplicates.length);
      console.log("‚ö†Ô∏è Duplicate details:", duplicates);
      console.log("üö´ Blocking submission/save due to duplicate publication");
      return true;
    }

    console.log("‚úÖ No duplicate found - safe to proceed");
    return false;

  } catch (error) {
    console.error("‚ùå Error checking duplicate publication:", error);
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å return false ‡πÄ‡∏õ‡πá‡∏ô throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    throw new Error(`Failed to check duplicate: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å collection ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö */
export async function checkGlobalDuplicatePublication(
  title: string,
  year: string,
  excludeUid?: string
): Promise<{ isDuplicate: boolean; duplicateInfo?: { userId: string; docId: string } }> {
  try {
    // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ collection ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà approved ‡πÅ‡∏•‡πâ‡∏ß
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å collection ‡∏´‡∏•‡∏±‡∏Å (‡∏´‡∏≤‡∏Å‡∏°‡∏µ)
    // const globalQuery = query(
    //   collection(db, "publications"),
    //   where("title", "==", title),
    //   where("year", "==", year)
    // );

    return { isDuplicate: false };
  } catch (error) {
    console.error("Error checking global duplicate publication:", error);
    return { isDuplicate: false };
  }
}
