"use client";

import React from "react";
import {
    Card,
    CardContent,
    Grid,
    Stack,
    Typography,
    Button,
    List,
    ListItem,
    ListItemText,
    ListItemAvatar,
    Avatar,
    Chip,
    Divider,
    CircularProgress,
    Box,
} from "@mui/material";
import {
    PersonAdd,
    Download,
    Upload,
    Analytics,
    Schedule,
} from "@mui/icons-material";
import { useAdmin } from "../context/AdminContext";

interface QuickActionsProps {
    onAddUser?: () => void;
}

const quickActions = [
    {
        icon: <PersonAdd />,
        label: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà",
        color: "primary" as const,
        action: "addUser",
    },
    {
        icon: <Upload />,
        label: "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        color: "success" as const,
        action: "importUsers",
    },
    {
        icon: <Download />,
        label: "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        color: "secondary" as const,
        action: "exportUsers",
    },
    {
        icon: <Analytics />,
        label: "‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥",
        color: "warning" as const,
        action: "viewAnalytics",
    },
];

// Utility function to format time
const formatTimeAgo = (timestamp: any) => {
    if (!timestamp) return "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏ß‡∏•‡∏≤";
    
    const now = new Date();
    const activityTime = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    const diffInMinutes = Math.floor((now.getTime() - activityTime.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà";
    if (diffInMinutes < 60) return `${diffInMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
    return `${Math.floor(diffInMinutes / 1440)} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
};

export default function DashboardExtras({ onAddUser }: QuickActionsProps) {
    const { activities, loading } = useAdmin();

    const handleAction = (action: string) => {
        switch (action) {
            case "addUser":
                onAddUser?.();
                break;
            default:
                console.log(`Action ${action} not implemented`);
        }
    };

    const getActivityColor = (type: string) => {
        switch (type) {
            case "create": return "success";
            case "edit": return "primary";
            case "delete": return "error";
            default: return "default";
        }
    };

    const getActivityIcon = (type: string) => {
        switch (type) {
            case "create": return "üë§";
            case "edit": return "‚úèÔ∏è";
            case "delete": return "üóëÔ∏è";
            default: return "üìã";
        }
    };


    // Mock activities data
// const mockActivities = [
//     {
//         id: "1",
//         userName: "‡∏î‡∏•‡∏†‡∏≤‡∏Ñ ‡∏Ñ‡∏á‡πÑ‡∏î‡πâ‡∏ö‡∏∏‡∏ç",
//         action: "create",
//         actionText: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
//         targetName: "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏°‡∏≤‡∏•‡∏µ ‡∏•‡∏π‡∏Å‡πÅ‡∏°‡πà‡πÅ‡∏´‡∏°‡πà‡∏°",
//         createdAt: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago
//     },
//     {
//         id: "2", 
//         userName: "‡∏ä‡∏±‡∏ä‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå",
//         action: "edit",
//         actionText: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
//         targetName: "‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÑ‡∏ä‡∏¢‡∏ä‡∏ô‡∏∞",
//         createdAt: new Date(Date.now() - 15 * 60 * 1000), // 15 minutes ago
//     },
//     {
//         id: "3",
//         userName: "Topfy Midnight",
//         action: "create",
//         actionText: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
//         targetName: "‡∏û‡∏µ‡πà‡πÄ‡∏à‡∏û‡∏µ‡πà",
//         createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
//     },
// ];


    return (
        <Grid container spacing={3} sx={{ mt: 2 }}>
            <Grid size={{ xs:  12, md: 24 }}>
                <Card elevation={0} sx={{ borderRadius: 4, border: "1px solid", borderColor: "divider" }}>
                    <CardContent sx={{ p: 3 }}>
                        <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ mb: 2 }}>
                            <Typography variant="h6" fontWeight={700}>
                                üìä ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                            </Typography>
                            <Chip 
                                icon={<Schedule />} 
                                label="‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" 
                                size="small" 
                                color="success" 
                                variant="outlined"
                            />
                        </Stack>
                        
                        {loading ? (
                            <Box sx={{ display: "flex", justifyContent: "center", py: 4 }}>
                                <CircularProgress size={24} />
                            </Box>
                        ) : activities.length === 0 ? (
                            <Box sx={{ textAlign: "center", py: 4 }}>
                                <Typography variant="body2" color="text.secondary">
                                    üéâ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                                </Typography>
                            </Box>
                        ) : (
                            <List sx={{ p: 0 }}>
                                {activities.slice(0, 5).map((activity, index) => (
                                    <React.Fragment key={activity.id}>
                                        <ListItem sx={{ px: 0, py: 1 }}>
                                            <ListItemAvatar>
                                                <Avatar 
                                                    sx={{ 
                                                        width: 32, 
                                                        height: 32, 
                                                        fontSize: "1rem",
                                                        bgcolor: "transparent",
                                                    }}
                                                >
                                                    {getActivityIcon(activity.action)}
                                                </Avatar>
                                            </ListItemAvatar>
                                            <ListItemText
                                                primary={
                                                    <Stack direction="row" alignItems="center" spacing={1}>
                                                        <Typography variant="body2" fontWeight={600}>
                                                            {activity.userName}
                                                        </Typography>
                                                        <Chip 
                                                            label={activity.actionText} 
                                                            size="small" 
                                                            color={getActivityColor(activity.action) as any}
                                                            variant="outlined"
                                                            sx={{ fontSize: "0.75rem", height: "20px" }}
                                                        />
                                                    </Stack>
                                                }
                                                secondary={
                                                    <Typography variant="body2" color="text.secondary">
                                                        {activity.targetName} ‚Ä¢ {formatTimeAgo(activity.createdAt)}
                                                    </Typography>
                                                }
                                            />
                                        </ListItem>
                                        {index < activities.slice(0, 5).length - 1 && (
                                            <Divider sx={{ my: 0.5 }} />
                                        )}
                                    </React.Fragment>
                                ))}
                            </List>
                        )}
                        
                        <Button 
                            fullWidth 
                            variant="text" 
                            size="small" 
                            sx={{ mt: 1, borderRadius: 2 }}
                        >
                            ‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        </Button>
                    </CardContent>
                </Card>
            </Grid>
        </Grid>
    );
}